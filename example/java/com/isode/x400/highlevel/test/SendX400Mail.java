/* 
 * Copyright (c) 2008-2009, Isode Limited, London, England.
 * All rights reserved.
 * 
 * Acquisition and use of this software and related materials for any
 * purpose requires a written licence agreement from Isode Limited,
 * or a written licence from an organisation licenced by Isode Limited
 * to grant such a licence.
 */



package com.isode.x400.highlevel.test;

import com.isode.x400.highlevel.BodypartIA5Text;
import com.isode.x400.highlevel.P3BindSession;
import com.isode.x400.highlevel.P7BindSession;
import com.isode.x400.highlevel.X400Msg;
import com.isode.x400.highlevel.X400APIException;
import com.isode.x400.highlevel.X400Msg.X400_Priority;
import com.isode.x400api.X400_att;

/**
 * Test program that connects to either an MTA's P3 channel or to a P7 Message Store, 
 * and submits a test message to itself.
 * 
 */
public class SendX400Mail {

	private static boolean use_p3 = false;

	private static String p7_message_store_presentation_address = "\"3001\"/Internet=nova.isode.net+3001";
	private static String p7_user_or_address = "/CN=P7User1/OU=Sales/O=nova/PRMD=Isode/ADMD= /C=GB/";
	private static String p7_user_password = "secret";

	private static String p3_channel_presentation_address = "\"593\"/Internet=nova.isode.net+102";
	private static String p3_user_or_address = "/CN=P3User1/OU=Sales/O=nova/PRMD=Isode/ADMD= /C=GB/";
	private static String p3_user_password = "l4password";

	private static String recipient_or_address =  "/CN=P7User1/OU=Sales/O=nova/PRMD=Isode/ADMD= /C=GB/";

	public static void main(String[] args) {

		P3BindSession bind_session;

		if (use_p3) {

			System.out.println("Connecting to the P3 Channel");

			// Create a new P7 bind session object using the values necessary for the bind
			P3BindSession connection = new P3BindSession(p3_channel_presentation_address,
					p3_user_or_address, p3_user_password);

			// Bind to the P3 Channel
			try {
				connection.bind();
			} catch (X400APIException e) {
				e.printStackTrace();
				System.exit(1);
			}

			bind_session = connection;

		} else {		

			System.out.println("Connecting to the P7 Message Store...");

			// Create a new P7 bind session object with the session values necessary for the bind
			P7BindSession connection = new P7BindSession(p7_message_store_presentation_address,
					p7_user_or_address, p7_user_password);


			// Bind to the P7 Message Store
			try {
				connection.bind();
			} catch (X400APIException e) {
				e.printStackTrace();
				System.exit(1);
			}

			bind_session = connection;

		}


		// Since the bind was successful, create a new message object using the 
		// session object that we just created
		X400Msg x400msg = new X400Msg(bind_session);

		// Request an IPN (InterPersonal Notification)
		// These are often known as Read Receipts, and are sent by the receiving user agent
		// when the message is read from the mailbox.
		//
		// In the case below, a notification is requested in both cases, when messages are
		// read and when messages are not read. 
		// If you don't need the positive notification, just remove it. 
		int ipn_request = X400Msg.IPN_NON_RECEIPT_NOTIFICATION;
		
		try {
			// Send the message to itself.
			//
			// Request a delivery report (DR), that is, a message generated by the X.400 MTA that contains 
			// information about the delivery of the message. 
		    // In this case below, X400Msg.Delivery_Report.DR_DELIVERY_REPORT means that reports will be generated both 
			// when the message is delivered and when it's not delivered.
			// If you don't want positive DRs, use DR_NON_DELIVERY_REPORT or DR_NO_REPORT
			x400msg.setTo(recipient_or_address, X400Msg.DR_Request.DR_NON_DELIVERY_REPORT, ipn_request);

			// Set the subject of the message
			x400msg.setSubject("Testing the High Level X.400 API");

			// X.400 messages need a message identifier, that will allow us to correlate 
			// DRs (delivery reports) and IPNs (Inter-Personal Notifications) 
			// This value can be assigned here, or it can be left empty, and a random value
			// will be assigned by the API. This value can be read later with getMessageIPMIdentifier()
			//String msg_id = Long.toString((new Date()).getTime()) + "*";
			//x400msg.setMessageIPMIdentifier(msg_id);

			// Set the MTS Priority
			x400msg.setPriority(X400_Priority.NORMAL_PRIORITY);

			// Set the content, in this case a simple IA5 text bodypart
			//x400msg.setTextBody("This is the body of the test message");

			// Set an optional X.411 Security Label for the message. 
			// There are four ways to add a security label: as a file with a BER encoded byte array,
			// a file with an XML encoded string, an XML encoded String, or a JRSecurityLabel object
			//x400msg.addSecurityLabelAsBER("/opt/isode/share/x400sdk/example/c/x411seclabel.ber");
			//x400msg.addSecurityLabelAsXMLFileName("/opt/isode/share/security-label/example-data/genser-test/lConfidential.xml");
			
			// Add another File Transfer bodypart
			BodypartIA5Text ia5 = new BodypartIA5Text("This is the content of the IA5 bodypart");
			x400msg.addBodypart(ia5);

			// Add a General Text bodypart
			//BodypartGeneralText gt1 = new BodypartGeneralText(true, "");
			//gt1.setContentFromFile("/etc/hosts");
			//x400msg.addBodypart(gt1);

			// Add a File Transfer bodypart
			//BodypartFTBP ftbp = new BodypartFTBP("/bin/ls");
			//ftbp.setApplicationReferenceOID("2.16.840.1.113694.2.2.1.1");
			//x400msg.addBodypart(ftbp);

			// Set the content type 
			x400msg.setIntParam(X400_att.X400_N_CONTENT_TYPE,22);

			// Now that all attributes are set, build the message
			x400msg.buildMsg(bind_session);

			// If a Message IPM Identifier wasn't assigned, read the value that was calculated
			String ipm_id = x400msg.getMessageIPMIdentifier(); 

			// Send the message to the Message Store
			x400msg.sendMsg(bind_session);

			// Unbind cleanly from the Message Store
			bind_session.unbind();


			// The message was correctly submitted to the Message Store
			// Retrieve the message submission ID (assigned by the MTA) and the submission time
			final String msg_sub_id = x400msg.getMessageIdentifier();
			final String msg_st = x400msg.getSubmissionTime();

			System.out.println("Message submitted.\nMessage Submission ID: " + 
					msg_sub_id + "\nIPM ID: " + ipm_id + "\nSubmission time: " + msg_st);

		} catch (X400APIException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			System.out.println("Exception code = " + e1.getNativeErrorCode());
			try {
				bind_session.unbind();
			} catch (X400APIException e) {
			}
			System.exit(1);		
		}

	}

}
